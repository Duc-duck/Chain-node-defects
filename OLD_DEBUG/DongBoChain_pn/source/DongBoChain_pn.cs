/*****************************************************************************
 * File generated by HDevelop Version 20.11
 *
 * Do not modify!
 *****************************************************************************/

using System;
using System.IO;
using HalconDotNet;


/*
 * If you use this class in your program, you have to 
 * link against hdevenginedotnet.dll and halcondotnet.dll.
 * The Dlls are located in ${HALCONROOT}/bin/dotnet[20|35].
 *
 * The wrapped .hdev or .hdpl files have to be located in the folder
 * that is specified in the static ResourcePath property of 
 * DongBoChain_pn. 
 * By default, ResourcePath is ${binary_dir}/res_DongBoChain_pn.
 *
 * It is recommended to compile an assembly from this file using
 * the generated CMakeLists.txt.
 */

namespace DongBoChain_ns
{
  public static class DongBoChain_pn
  {

    public static void Chain_node_area_1(
        HObject Image,
        out HObject ImageMin,
        HTuple row_cls,
        HTuple col_cls,
        HTuple row_ero,
        HTuple col_ero,
        HTuple Row0,
        HTuple Column0,
        HTuple Length1,
        HTuple Length2,
        out HTuple Chain_area)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Chain_node_area_1.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"row_cls",row_cls);
        SetParameter(call,"col_cls",col_cls);
        SetParameter(call,"row_ero",row_ero);
        SetParameter(call,"col_ero",col_ero);
        SetParameter(call,"Row0",Row0);
        SetParameter(call,"Column0",Column0);
        SetParameter(call,"Length1",Length1);
        SetParameter(call,"Length2",Length2);
        call.Execute();
        ImageMin = GetParameterHObject(call,"ImageMin");
        Chain_area = GetParameterHTuple(call,"Chain_area");
      }
    }

    public static void Chain_node_area_2(
        HObject Image,
        out HObject ImageMin,
        HTuple row_cls,
        HTuple col_cls,
        HTuple row_ero,
        HTuple col_ero,
        HTuple Row0,
        HTuple Column0,
        HTuple phi,
        HTuple Length1,
        HTuple Length2,
        out HTuple Chain_area)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Chain_node_area_2.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"row_cls",row_cls);
        SetParameter(call,"col_cls",col_cls);
        SetParameter(call,"row_ero",row_ero);
        SetParameter(call,"col_ero",col_ero);
        SetParameter(call,"Row0",Row0);
        SetParameter(call,"Column0",Column0);
        SetParameter(call,"phi",phi);
        SetParameter(call,"Length1",Length1);
        SetParameter(call,"Length2",Length2);
        call.Execute();
        ImageMin = GetParameterHObject(call,"ImageMin");
        Chain_area = GetParameterHTuple(call,"Chain_area");
      }
    }

    public static void Find_Shape(
        HObject Image,
        HTuple Model_file,
        HTuple min_score,
        out HTuple num_matches)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Find_Shape.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Model_file",Model_file);
        SetParameter(call,"min_score",min_score);
        call.Execute();
        num_matches = GetParameterHTuple(call,"num_matches");
      }
    }

    public static void Find_Shape_Roller(
        HObject Image,
        HTuple Model_file,
        HTuple row_ero,
        HTuple col_ero,
        HTuple row_cls,
        HTuple col_cls,
        HTuple min_score,
        out HTuple Num_matches)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Find_Shape_Roller.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Model_file",Model_file);
        SetParameter(call,"row_ero",row_ero);
        SetParameter(call,"col_ero",col_ero);
        SetParameter(call,"row_cls",row_cls);
        SetParameter(call,"col_cls",col_cls);
        SetParameter(call,"min_score",min_score);
        call.Execute();
        Num_matches = GetParameterHTuple(call,"Num_matches");
      }
    }

    public static void Get_Shape(
        HObject Image,
        HTuple Row0,
        HTuple Column0,
        HTuple phi,
        HTuple Length1,
        HTuple Length2,
        HTuple Save_to,
        out HTuple ModeID)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Get_Shape.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Row0",Row0);
        SetParameter(call,"Column0",Column0);
        SetParameter(call,"phi",phi);
        SetParameter(call,"Length1",Length1);
        SetParameter(call,"Length2",Length2);
        SetParameter(call,"Save_to",Save_to);
        call.Execute();
        ModeID = GetParameterHTuple(call,"ModeID");
      }
    }

    public static void Get_Shape_Circle(
        HObject Image,
        HTuple Row0,
        HTuple Column0,
        HTuple Radius,
        HTuple Save_to,
        out HTuple ModelID)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Get_Shape_Circle.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Row0",Row0);
        SetParameter(call,"Column0",Column0);
        SetParameter(call,"Radius",Radius);
        SetParameter(call,"Save_to",Save_to);
        call.Execute();
        ModelID = GetParameterHTuple(call,"ModelID");
      }
    }

    public static void Roller_process(
        HObject Image,
        out HObject ImageMin,
        HTuple row_ero,
        HTuple col_ero,
        HTuple row_cls,
        HTuple col_cls)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Roller_process.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"row_ero",row_ero);
        SetParameter(call,"col_ero",col_ero);
        SetParameter(call,"row_cls",row_cls);
        SetParameter(call,"col_cls",col_cls);
        call.Execute();
        ImageMin = GetParameterHObject(call,"ImageMin");
      }
    }


    /****************************************************************************
    * ResourcePath
    *****************************************************************************
    * Use ResourcePath in your application to specify the location of the 
    * HDevelop script or procedure library.
    *****************************************************************************/
    public static string ResourcePath
    {
      get
      {
        return _resource_path;
      }
      set
      {
        lock(_procedure_path_lock)
        {
          _procedure_path_initialized = false;
        }
        _resource_path = value;
      }
    }

#region Implementation details

    /* Implementation details of the wrapper class.
     * You do not have to use these functions ever.
     */

    private static bool _procedure_path_initialized = false;
    private static object _procedure_path_lock = new object();

    private static string _resource_path = "./res_DongBoChain_pn";

    private static Lazy<HDevProgram> _Program
            = new Lazy<HDevProgram>(() => new HDevProgram(Path.Combine(DongBoChain_pn.ResourcePath, "Halcon_DongBoChain.hdev")));
    private static Lazy<HDevProcedure> _Chain_node_area_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Chain_node_area_1"));
    private static Lazy<HDevProcedure> _Chain_node_area_2
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Chain_node_area_2"));
    private static Lazy<HDevProcedure> _Find_Shape
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Find_Shape"));
    private static Lazy<HDevProcedure> _Find_Shape_Roller
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Find_Shape_Roller"));
    private static Lazy<HDevProcedure> _Get_Shape
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Get_Shape"));
    private static Lazy<HDevProcedure> _Get_Shape_Circle
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Get_Shape_Circle"));
    private static Lazy<HDevProcedure> _Roller_process
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Roller_process"));
        
    private static HTuple GetParameterHTuple(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamTuple(name);
    }

    private static HObject GetParameterHObject(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamObject(name);
    }

    private static HTupleVector GetParameterHTupleVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamVector(name);
    }

    private static HObjectVector GetParameterHObjectVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamVector(name);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTuple tuple)
    {
      call.SetInputCtrlParamTuple(name,tuple);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObject obj)
    {
      call.SetInputIconicParamObject(name,obj);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTupleVector vector)
    {
      call.SetInputCtrlParamVector(name,vector);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObjectVector vector)
    {
      call.SetInputIconicParamVector(name,vector);
    }

    private static void AddResourcePathToProcedurePath() 
    {
      lock(_procedure_path_lock)
      {
        if(!_procedure_path_initialized)
        {
          new HDevEngine().AddProcedurePath(ResourcePath);
          _procedure_path_initialized = true;
        }
      }
    }

#endregion

}
}